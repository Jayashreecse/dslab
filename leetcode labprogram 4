4b) Program - Leetcode platform
Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character. Note that after backspacing an empty text, the text will continue empty.
 Example 1: Input: s = "ab#c", t = "ad#c" Output: true Explanation: Both s and t become "ac". 
Example 2: Input: s = "ab##", t = "c#d#" Output: true Explanation: Both s and t become "". Example 3: Input: s = "a#c", t = "b" Output: false Explanation: s becomes "c" while t becomes "b". Constraints: 1 <= s.length, t.length <= 200 s and t only contain lowercase letters and '#' characters. 

bool backspaceCompare(char* s, char* t) {
     int i = strlen(s) - 1, j = strlen(t) - 1;
   
    // Process both strings until we either reach the beginning of both strings
    while (i >= 0 || j >= 0) {
        // Process string s
        int skip_s = 0;  // Track the number of backspaces to skip in s
        while (i >= 0 && (s[i] == '#' || skip_s > 0)) {
            if (s[i] == '#') {
                skip_s++;  // We found a backspace, so increment skip count
            } else {
                skip_s--;  // We skip this character
            }
            i--;  // Move to the previous character
        }


        // Process string t
        int skip_t = 0;  // Track the number of backspaces to skip in t
        while (j >= 0 && (t[j] == '#' || skip_t > 0)) {
            if (t[j] == '#') {
                skip_t++;  // We found a backspace, so increment skip count
            } else {
                skip_t--;  // We skip this character
            }
            j--;  // Move to the previous character
        }


        // Compare the current characters in both strings
        if (i >= 0 && j >= 0 && s[i] != t[j]) {
            return false;  // If characters don't match, return false
        }


        // If only one string has been completely processed, return false
        if ((i >= 0) != (j >= 0)) {
            return false;  // One string is longer than the other after processing
        }


        i--;  // Move to the previous character in string s
        j--;  // Move to the previous character in string t
    }
   
    return true;  // If we exit the loop without returning false, the strings are equal
}
